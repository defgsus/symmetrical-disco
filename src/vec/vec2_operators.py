# autogenerated by _generator.py


class Vec2Operators:

    def __abs__(self):
        return self.__class__(
            abs(self._v[0]),
            abs(self._v[1]),
        )

    def __neg__(self):
        return self.__class__(
            -self._v[0],
            -self._v[1],
        )

    def __add__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                self._v[0] + arg,
                self._v[1] + arg,
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                self._v[0] + arg._v[0],
                self._v[1] + arg._v[1],
            )
        else:
            return self.__class__(
                self._v[0] + arg[0],
                self._v[1] + arg[1],
            )

    def __radd__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                arg + self._v[0],
                arg + self._v[1],
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                arg._v[0] + self._v[0],
                arg._v[1] + self._v[1],
            )
        else:
            return self.__class__(
                arg[0] + self._v[0],
                arg[1] + self._v[1],
            )

    def __iadd__(self, arg):
        if isinstance(arg, (int, float)):
            self._v[0] = self._v[0] + arg
            self._v[1] = self._v[1] + arg
        elif isinstance(arg, self.__class__):
            self._v[0] = self._v[0] + arg._v[0]
            self._v[1] = self._v[1] + arg._v[1]
        else:
            self._v[0] = self._v[0] + arg[0]
            self._v[1] = self._v[1] + arg[1]
        return self
    def __sub__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                self._v[0] - arg,
                self._v[1] - arg,
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                self._v[0] - arg._v[0],
                self._v[1] - arg._v[1],
            )
        else:
            return self.__class__(
                self._v[0] - arg[0],
                self._v[1] - arg[1],
            )

    def __rsub__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                arg - self._v[0],
                arg - self._v[1],
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                arg._v[0] - self._v[0],
                arg._v[1] - self._v[1],
            )
        else:
            return self.__class__(
                arg[0] - self._v[0],
                arg[1] - self._v[1],
            )

    def __isub__(self, arg):
        if isinstance(arg, (int, float)):
            self._v[0] = self._v[0] - arg
            self._v[1] = self._v[1] - arg
        elif isinstance(arg, self.__class__):
            self._v[0] = self._v[0] - arg._v[0]
            self._v[1] = self._v[1] - arg._v[1]
        else:
            self._v[0] = self._v[0] - arg[0]
            self._v[1] = self._v[1] - arg[1]
        return self
    def __mul__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                self._v[0] * arg,
                self._v[1] * arg,
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                self._v[0] * arg._v[0],
                self._v[1] * arg._v[1],
            )
        else:
            return self.__class__(
                self._v[0] * arg[0],
                self._v[1] * arg[1],
            )

    def __rmul__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                arg * self._v[0],
                arg * self._v[1],
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                arg._v[0] * self._v[0],
                arg._v[1] * self._v[1],
            )
        else:
            return self.__class__(
                arg[0] * self._v[0],
                arg[1] * self._v[1],
            )

    def __imul__(self, arg):
        if isinstance(arg, (int, float)):
            self._v[0] = self._v[0] * arg
            self._v[1] = self._v[1] * arg
        elif isinstance(arg, self.__class__):
            self._v[0] = self._v[0] * arg._v[0]
            self._v[1] = self._v[1] * arg._v[1]
        else:
            self._v[0] = self._v[0] * arg[0]
            self._v[1] = self._v[1] * arg[1]
        return self
    def __truediv__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                self._v[0] / arg,
                self._v[1] / arg,
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                self._v[0] / arg._v[0],
                self._v[1] / arg._v[1],
            )
        else:
            return self.__class__(
                self._v[0] / arg[0],
                self._v[1] / arg[1],
            )

    def __rtruediv__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                arg / self._v[0],
                arg / self._v[1],
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                arg._v[0] / self._v[0],
                arg._v[1] / self._v[1],
            )
        else:
            return self.__class__(
                arg[0] / self._v[0],
                arg[1] / self._v[1],
            )

    def __itruediv__(self, arg):
        if isinstance(arg, (int, float)):
            self._v[0] = self._v[0] / arg
            self._v[1] = self._v[1] / arg
        elif isinstance(arg, self.__class__):
            self._v[0] = self._v[0] / arg._v[0]
            self._v[1] = self._v[1] / arg._v[1]
        else:
            self._v[0] = self._v[0] / arg[0]
            self._v[1] = self._v[1] / arg[1]
        return self
    def __mod__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                self._v[0] % arg,
                self._v[1] % arg,
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                self._v[0] % arg._v[0],
                self._v[1] % arg._v[1],
            )
        else:
            return self.__class__(
                self._v[0] % arg[0],
                self._v[1] % arg[1],
            )

    def __rmod__(self, arg):
        if isinstance(arg, (int, float)):
            return self.__class__(
                arg % self._v[0],
                arg % self._v[1],
            )
        elif isinstance(arg, self.__class__):
            return self.__class__(
                arg._v[0] % self._v[0],
                arg._v[1] % self._v[1],
            )
        else:
            return self.__class__(
                arg[0] % self._v[0],
                arg[1] % self._v[1],
            )

    def __imod__(self, arg):
        if isinstance(arg, (int, float)):
            self._v[0] = self._v[0] % arg
            self._v[1] = self._v[1] % arg
        elif isinstance(arg, self.__class__):
            self._v[0] = self._v[0] % arg._v[0]
            self._v[1] = self._v[1] % arg._v[1]
        else:
            self._v[0] = self._v[0] % arg[0]
            self._v[1] = self._v[1] % arg[1]
        return self
